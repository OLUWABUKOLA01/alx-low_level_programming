!<arch>
0-isupper.o/    0           0     0     644     190       `
#include "main.h"

/**
 *  _isupper -  uppercase character
 * @c: To check
 * Return: 0 or 1
 *
 */

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')

		return (1);

	else

		return (0);

}
0-memset.o/     0           0     0     644     271       `
#include "main.h"
/**
 * _memset - fill memory with a constant byte
 * @s: first function
 * @b: second function
 * @n: third function
 * Return: s
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int y;

	for (y = 0; y < n; y++)
		s[y] = b;
	return (s);
}

0-strcat.o/     0           0     0     644     390       `
#include "main.h"
/**
 * *_strcat - concatenates two strings
 * @dest: first string
 * @src: second string
 * Return: dest
 */
char *_strcat(char *dest, char *src)
{
	int destlen = 0;
	int srclen = 0;
	int i;

	for (i = 0; dest[i] != '\0'; i++)
		destlen++;
	for (i = 0; src[i] != '\0'; i++)
		srclen++;

	for (i = 0; i <= srclen; i++)
	{
		dest[destlen + i] = src[i];
	}
	return (dest);
}
1-isdigit.o/    0           0     0     644     198       `
#include "main.h"

/**
 *  _isdigit - check 0 through 9
 *
 * @c: numbers to be checked
 * Return: 0 or 1
 */

int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);

	else

		return (0);
}
1-memcpy.o/     0           0     0     644     290       `
#include "main.h"
/**
 * _memcpy - copies memory area
 * @dest: destination function
 * @src: source function
 * @n: n function
 * Return: dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int z;

	for (z = 0; z < n; z++)
	{
		dest[z] = src[z];
	}
	return (dest);
}
1-strncat.o/    0           0     0     644     381       `
#include "main.h"
#include <string.h>
/**
 * *_strncat -  function  similar to the _strcat function
 * @dest: first string
 * @src: second string
 * @n: bytes
 * Return: dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int len = strlen(dest);
	int j;

	for (j = 0; j < n && *src != '\0'; j++)
	{
		dest[len + j] = *src;
		src++;
	}
	dest[len + j] = '\0';
	return (dest);
}

100-atoi.o/     0           0     0     644     570       `
#include "main.h"

/**
 * _atoi - converts a string to an integer.
 * @s: input string
 * Return: integer
 */
int _atoi(char *s)
{
	unsigned int count = 0, size = 0, ti = 0, tn = 1, a = 1, b;

	while (*(s + count) != '\0')
	{
		if (size > 0 && (*(s + count) < '0' || *(s + count) > '9'))
			break;
		if (*(s + count) == '-')
			tn *= -1;

		if ((*(s + count) >= '0') && (*(s + count) <= '9'))
		{
			if (size > 0)
				a *= 10;
			size++;
		}
		count++;
	}

	for (b = count - size; b < count; b++)
	{
		ti = ti + ((*(s + b) - 48) * a);
		a /= 10;
	}
	return (ti * tn);
}
2-strchr.o/     0           0     0     644     248       `
#include "main.h"
/**
 * _strchr - locate a character in a string
 * @s: string
 * @c: character
 * Return: 0
 */
char *_strchr(char *s, char c)
{
	int x;

	for (x = 0; s[x] >= '\0'; x++)
	{
		if (s[x] == c)
			return (s + x);
	}
	return ('\0');
}
2-strlen.o/     0           0     0     644     229       `
#include "main.h"

/**
 *  _strlen - return the length of a string
 * @s: string
 * Return: the length of string
 */
int _strlen(char *s)
{
	int j;
	int count = 0;

	for (j = 0; s[j] != '\0'; j++)

		count++;

	return (count);
}

2-strncpy.o/    0           0     0     644     327       `
#include "main.h"

/**
 * _strncpy - copy a string
 * @dest: first parameter
 * @src: second parameter
 * @n: third parameter
 * Return: dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int a = 0;

	for (a = 0; a < n && src[a] != '\0'; a++)
		dest[a] = src[a];

	for (; n > a; a++)
		dest[a] = '\0';

	return (dest);
}

3-islower.o/    0           0     0     644     220       `
#include "main.h"

/**
 *  _islower -  checks for lowercase character
 *
 * @c: character to test
 *
 * Return: 1 or 0 for otherwise
 */
int _islower(int c)
{
	if (c >= 97 && c <= 122)
	{
		return (1);
	}
	return (0);
}
3-puts.o/       0           0     0     644     176       `
#include "main.h"

/**
 * _puts -  print a string
 * @str: string
 */
void _puts(char *str)
{
	int i;

	for (i = 0; str[i] != '\0'; i++)
	_putchar(str[i]);
	_putchar('\n');
}

3-strcmp.o/     0           0     0     644     368       `
#include "main.h"
/**
 * _strcmp - compare two strings
 * @s1: first string
 * @s2: second string
 * Return: a string
 */
int _strcmp(char *s1, char *s2)
{
	int i;

	for (i = 0; s1[i] != '\0' && s2[i] != '\0'; i++)
	{
		if (s1[i] != s2[i])

	{
		if (s1[i] < s2[i])
			return (s1[i] - s2[i]);

		else if (s2[i] < s1[i])
			return (s1[i] - s2[i]);
	}
	}
	return (0);

}
3-strspn.o/     0           0     0     644     382       `
#include "main.h"
/**
 * _strspn -  length of a prefix substring
 * @s: string
 * @accept: bytes
 * Return: Always 0
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int x = 0;
	int y;

	while (*s)
	{
		for (y = 0; accept[y]; y++)
		{

			if (*s == accept[y])
			{
				x++;
				break;
			}

			else if (accept[y + 1] == '\0')
				return (x);
		}
		s++;
	}
	return (x);
}
4-isalpha.o/    0           0     0     644     223       `
#include "main.h"
/**
 * _isalpha -  check  character
 * @c: character to test
 * Return: 1 or 0 otherwise
 *
 */
int _isalpha(int c)
{
	if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))
	{
		return (1);
	}
	return (0);
}

4-strpbrk.o/    0           0     0     644     346       `
#include "main.h"
/**
 * _strpbrk - searches a string for any of a set of bytes
 * @s: string
 *@accept: byte of string
 * Return: Always 0
 */
char *_strpbrk(char *s, char *accept)
{
	int j;
	int k;

	for (j = 0; s[j] != '\0'; j++)
	{
		for (k = 0; accept[k] != '\0'; k++)
		{
			if (s[j] == accept[k])
				return (s + j);
		}
	}
	return (0);
}
5-strstr.o/     0           0     0     644     369       `
#include "main.h"
/**
 * _strstr - locates a substring
 * @haystack: string
 * @needle: substring
 * Return: Always 0
 */
char *_strstr(char *haystack, char *needle)
{

	for (; *haystack != '\0'; haystack++)
	{
		char *a = haystack;
		char *b = needle;

		while (*a == *b && *b != '\0')
		{
			a++;
			b++;
		}
		if (*b == '\0')
			return (haystack);
	}
	return (0);
}

6-abs.o/        0           0     0     644     265       `
#include "main.h"

/**
 *  _abs - compute the absolute value of an integer
 * @i: value use to find the absolute integer
 *
 * Return: Absolute value
 */

int _abs(int i)
{
	if (i < 0)
	{
		int abs_val;

		abs_val = i * -1;

		return (abs_val);
	}

	return (i);

}

9-strcpy.o/     0           0     0     644     341       `
#include "main.h"
/**
 * *_strcpy - copy the string pointed to src
 * including the terminating null byte (\0)
 * to the buffer pointed to by dest
 * @dest: pointer
 * @src: string
 * Return: 0
 */
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';
	return (dest);
}

_putchar.o/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

